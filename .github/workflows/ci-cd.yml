name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY_URL: docker.io
  IMAGE_NAME: gameevents
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality & Testing
  test:
    name: 🧪 Test & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install Dependencies
        run: npm ci
        
      - name: 🔍 TypeScript Check
        run: npm run type-check
        
      - name: 🧹 Lint Code
        run: npm run lint
        
      - name: 🧪 Run Tests
        run: npm run test:ci
        env:
          CI: true
          
      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v3
        if: success()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # Job 2: Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🛡️ Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: 🔍 Audit Dependencies
        run: |
          npm audit --audit-level high
          npm audit --audit-level high --json > audit-results.json || true
          
      - name: 📊 Upload Audit Results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit
          path: audit-results.json

  # Job 3: Build & Push Docker Image
  build-and-push:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: 🔨 Build and Push Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  # Job 4: Deploy to Vercel
  deploy:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.preview-url }}
      
    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🚀 Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

  # Job 5: Health Check
  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
      - name: 🩺 Check Application Health
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Health check with retry logic
          for i in {1..10}; do
            if curl -f -s -o /dev/null "${{ needs.deploy.outputs.preview-url || 'https://gameevents.vercel.app' }}/api/health"; then
              echo "✅ Health check passed on attempt $i"
              break
            else
              echo "❌ Health check failed on attempt $i"
              if [ $i -eq 10 ]; then
                echo "🚨 All health checks failed"
                exit 1
              fi
              sleep 10
            fi
          done
          
      - name: 🌐 Test Core Endpoints
        run: |
          BASE_URL="${{ needs.deploy.outputs.preview-url || 'https://gameevents.vercel.app' }}"
          
          # Test main page
          curl -f -s "$BASE_URL" > /dev/null
          echo "✅ Main page accessible"
          
          # Test API endpoints
          curl -f -s "$BASE_URL/api/health" > /dev/null
          echo "✅ Health endpoint accessible"
          
          curl -f -s "$BASE_URL/api/games/upcoming" > /dev/null
          echo "✅ Upcoming games API accessible"

  # Job 6: Notification
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [test, security, build-and-push, deploy, health-check]
    if: always()
    
    steps:
      - name: 📤 Send Slack Notification
        uses: 8398a7/action-slack@v3
        if: env.SLACK_WEBHOOK_URL != ''
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          username: 'GitHub Actions'
          icon_emoji: ':rocket:'
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: 📧 Email Notification on Failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 GameEvents CI/CD Pipeline Failed"
          body: |
            The CI/CD pipeline for GameEvents has failed.
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            Please check the GitHub Actions logs for more details.
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: "GameEvents CI/CD <${{ secrets.EMAIL_USERNAME }}>"

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true 